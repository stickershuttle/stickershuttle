const axios = require('axios');
const { shopifyConfig, validateConfig } = require('./shopify-config');

class ShopifyClient {
  constructor() {
    this.config = shopifyConfig;
    
    // Debug logging
    console.log('üîß ShopifyClient constructor - config:', {
      storeUrl: this.config.storeUrl,
      apiVersion: this.config.apiVersion,
      hasAccessToken: !!this.config.accessToken
    });
    
    if (!this.config.storeUrl) {
      console.error('‚ùå CRITICAL: storeUrl is undefined in ShopifyClient');
      console.error('Config object:', this.config);
    }
    
    this.baseURL = `https://${this.config.storeUrl}/admin/api/${this.config.apiVersion}`;
    this.headers = {
      'X-Shopify-Access-Token': this.config.accessToken,
      'Content-Type': 'application/json'
    };
    
    console.log('üåê ShopifyClient baseURL:', this.baseURL);
  }

  // Create a draft order
  async createDraftOrder(orderData) {
    try {
      console.log('üõí Creating draft order with baseURL:', this.baseURL);
      console.log('üì¶ Order data:', JSON.stringify(orderData, null, 2));
      
      // Determine the return URL based on environment
      const isDevelopment = process.env.NODE_ENV === 'development';
      const baseReturnUrl = isDevelopment 
        ? 'http://localhost:3000' 
        : 'https://stickershuttle.com';
      
      const response = await axios.post(
        `${this.baseURL}/draft_orders.json`,
        {
          draft_order: {
            line_items: orderData.lineItems,
            customer: orderData.customer,
            shipping_address: orderData.shippingAddress,
            billing_address: orderData.billingAddress,
            email: orderData.email,
            note: orderData.note || '',
            tags: orderData.tags || 'draft-order',
            use_customer_default_address: true,
            // Add return URLs for post-checkout redirect
            invoice_sent_at: null, // Prevents auto-sending invoice
            checkout_url: null, // Will be generated by Shopify
            // Note: Shopify doesn't support custom return URLs directly on draft orders
            // but we can handle this via webhooks or URL parameters
          }
        },
        { headers: this.headers }
      );

      const draftOrder = response.data.draft_order;
      
      // Modify the invoice URL to include our return URL as a parameter
      if (draftOrder.invoice_url) {
        const url = new URL(draftOrder.invoice_url);
        // Add return URL parameter (Shopify will preserve this in some cases)
        url.searchParams.set('return_to', `${baseReturnUrl}/order-success`);
        draftOrder.invoice_url = url.toString();
        
        console.log('üîó Modified invoice URL with return parameter:', draftOrder.invoice_url);
      }

      return draftOrder;
    } catch (error) {
      console.error('Error creating draft order:', error.response?.data || error.message);
      const errorMessage = error.response?.data?.errors 
        ? JSON.stringify(error.response.data.errors) 
        : error.response?.data?.message || error.message;
      throw new Error(`Failed to create draft order: ${errorMessage}`);
    }
  }

  // Complete a draft order (convert to order)
  async completeDraftOrder(draftOrderId) {
    try {
      const response = await axios.put(
        `${this.baseURL}/draft_orders/${draftOrderId}/complete.json`,
        { payment_pending: false },
        { headers: this.headers }
      );

      return response.data.draft_order;
    } catch (error) {
      console.error('Error completing draft order:', error.response?.data || error.message);
      throw new Error(`Failed to complete draft order: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get draft order details
  async getDraftOrder(draftOrderId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/draft_orders/${draftOrderId}.json`,
        { headers: this.headers }
      );

      return response.data.draft_order;
    } catch (error) {
      console.error('Error fetching draft order:', error.response?.data || error.message);
      throw new Error(`Failed to fetch draft order: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Update draft order
  async updateDraftOrder(draftOrderId, updateData) {
    try {
      const response = await axios.put(
        `${this.baseURL}/draft_orders/${draftOrderId}.json`,
        { draft_order: updateData },
        { headers: this.headers }
      );

      return response.data.draft_order;
    } catch (error) {
      console.error('Error updating draft order:', error.response?.data || error.message);
      throw new Error(`Failed to update draft order: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Delete draft order
  async deleteDraftOrder(draftOrderId) {
    try {
      await axios.delete(
        `${this.baseURL}/draft_orders/${draftOrderId}.json`,
        { headers: this.headers }
      );

      return { success: true, message: 'Draft order deleted successfully' };
    } catch (error) {
      console.error('Error deleting draft order:', error.response?.data || error.message);
      throw new Error(`Failed to delete draft order: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get all draft orders
  async getAllDraftOrders(options = {}) {
    try {
      const params = new URLSearchParams({
        limit: options.limit || 50,
        since_id: options.sinceId || '',
        status: options.status || 'open'
      });

      const response = await axios.get(
        `${this.baseURL}/draft_orders.json?${params}`,
        { headers: this.headers }
      );

      return response.data.draft_orders;
    } catch (error) {
      console.error('Error fetching draft orders:', error.response?.data || error.message);
      throw new Error(`Failed to fetch draft orders: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get all orders (completed orders, not drafts)
  async getAllOrders(options = {}) {
    try {
      const params = new URLSearchParams({
        limit: options.limit || 50,
        since_id: options.sinceId || '',
        status: options.status || 'any'
      });

      const response = await axios.get(
        `${this.baseURL}/orders.json?${params}`,
        { headers: this.headers }
      );

      return response.data.orders;
    } catch (error) {
      console.error('Error fetching orders:', error.response?.data || error.message);
      throw new Error(`Failed to fetch orders: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get specific order by ID  
  async getOrder(orderId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/orders/${orderId}.json`,
        { headers: this.headers }
      );

      return response.data.order;
    } catch (error) {
      console.error('Error fetching order:', error.response?.data || error.message);
      throw new Error(`Failed to fetch order: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get product details including variants
  async getProduct(productId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/products/${productId}.json`,
        { headers: this.headers }
      );

      return response.data.product;
    } catch (error) {
      console.error('Error fetching product:', error.response?.data || error.message);
      throw new Error(`Failed to fetch product: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get product variants
  async getProductVariants(productId) {
    try {
      const response = await axios.get(
        `${this.baseURL}/products/${productId}/variants.json`,
        { headers: this.headers }
      );

      return response.data.variants;
    } catch (error) {
      console.error('Error fetching product variants:', error.response?.data || error.message);
      throw new Error(`Failed to fetch product variants: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Create checkout URL for draft order
  async createCheckoutUrl(draftOrderId) {
    try {
      const draftOrder = await this.getDraftOrder(draftOrderId);
      
      if (!draftOrder.invoice_url) {
        throw new Error('No invoice URL available for this draft order');
      }

      return {
        checkoutUrl: draftOrder.invoice_url,
        draftOrderId: draftOrder.id,
        totalPrice: draftOrder.total_price
      };
    } catch (error) {
      console.error('Error creating checkout URL:', error.message);
      throw error;
    }
  }

  // Webhook Management Methods
  
  // Create a webhook
  async createWebhook(topic, address, format = 'json') {
    try {
      const response = await axios.post(
        `${this.baseURL}/webhooks.json`,
        {
          webhook: {
            topic: topic,
            address: address,
            format: format
          }
        },
        { headers: this.headers }
      );

      return response.data.webhook;
    } catch (error) {
      console.error('Error creating webhook:', error.response?.data || error.message);
      throw new Error(`Failed to create webhook: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Get all webhooks
  async getWebhooks() {
    try {
      const response = await axios.get(
        `${this.baseURL}/webhooks.json`,
        { headers: this.headers }
      );

      return response.data.webhooks;
    } catch (error) {
      console.error('Error fetching webhooks:', error.response?.data || error.message);
      throw new Error(`Failed to fetch webhooks: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Delete a webhook
  async deleteWebhook(webhookId) {
    try {
      await axios.delete(
        `${this.baseURL}/webhooks/${webhookId}.json`,
        { headers: this.headers }
      );

      return { success: true, message: 'Webhook deleted successfully' };
    } catch (error) {
      console.error('Error deleting webhook:', error.response?.data || error.message);
      throw new Error(`Failed to delete webhook: ${error.response?.data?.errors || error.message}`);
    }
  }

  // Setup essential webhooks for order management
  async setupOrderWebhooks(baseUrl) {
    const webhookTopics = [
      'orders/create',
      'orders/updated', 
      'orders/paid',
      'orders/cancelled',
      'orders/fulfilled'
    ];

    const results = [];
    
    for (const topic of webhookTopics) {
      try {
        const webhook = await this.createWebhook(
          topic,
          `${baseUrl}/webhooks/${topic.replace('/', '-')}`
        );
        results.push({ topic, success: true, webhook });
      } catch (error) {
        results.push({ topic, success: false, error: error.message });
      }
    }

    return results;
  }
}

module.exports = ShopifyClient; 